using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using CapaNegocios;

namespace CapaPresentacion
{
    public partial class frmProductos : Form
    {
        bool isEditar, isNuevo ,isMinimized = false;
        Point posOr;
        public frmProductos()
        {
            InitializeComponent();
            posOr = new Point(this.Location.X,this.Location.Y);
            
            
        }

        private void PictureBox2_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        
        private void PictureBox1_Click(object sender, EventArgs e)
        {
            
            frmDashBoard das = Owner as frmDashBoard;
            if (isMinimized == true)
            {
                this.Size = new Size(626,494);
                this.Location = posOr;
                pictureBox2.Location = new Point(580, 13);
                pcbMinimizar.Location = new Point(542, 13);
                isMinimized = false;
                das.Enabled = false;
                
            }
            else
            {
                
                this.Size = new Size(305, 51);
                this.Location = new Point(25, 965);
                pictureBox2.Location = new Point(267, 13);
                pcbMinimizar.Location = new Point(229, 13);
                isMinimized = true;
                das.Enabled = true;
            }
            
        }

        public void LoadProd()
        {
            dgvProductos.DataSource = NProductos.GetShow();
            dgvProductos.Columns[0].Visible = false;
            dgvProductos.Columns[1].Visible = false;
            lblcantRegistros.Text = dgvProductos.Rows.Count.ToString();
        }
        private void FrmProductos_Load(object sender, EventArgs e)
        {
            LoadProd();
            HabiliarBotones();
        }

        private void FrmProductos_FormClosed(object sender, FormClosedEventArgs e)
        {
            
            frmDashBoard das = Owner as frmDashBoard;
            frmFacturas fac = Owner as frmFacturas;
            if (das != null)
            {
                das.Enabled = true;
                das.LoadDash();
                das.LoadChart();
            }
            else
            {
                if (fac != null)
                {
                    fac.Enabled = true;
                }
            }
            
            

        }

        private void BunifuCheckbox1_OnChange(object sender, EventArgs e)
        {
            if (bunifuCheckbox1.Checked)
            {
                dgvProductos.Columns[0].Visible = true;
                dgvProductos.ReadOnly = false;
            }
            else
            {
                foreach (DataGridViewRow item in dgvProductos.Rows)
                {
                    item.Cells[0].Value = false;
                }
                dgvProductos.Columns[0].Visible = false;
                dgvProductos.ReadOnly = true;
            }
        }

        private void DgvProductos_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            txtNro.Text = dgvProductos.CurrentRow.Cells[1].Value.ToString();
            txtDesc.Text = dgvProductos.CurrentRow.Cells[2].Value.ToString();
            txtPrecio.Text = dgvProductos.CurrentRow.Cells[4].Value.ToString();
            txtStock.Text = dgvProductos.CurrentRow.Cells[3].Value.ToString();
            rtxtObs.Text = dgvProductos.CurrentRow.Cells[5].Value.ToString();
            tabControl1.SelectedTab = tabPage2;
        }

        private void TxtBuscar_TextChanged(object sender, EventArgs e)
        {
            dgvProductos.DataSource = NProductos.GetShowPerName(txtBuscar.Text);
            lblcantRegistros.Text = dgvProductos.RowCount.ToString();
            dgvProductos.Columns[0].Visible = false;
            dgvProductos.Columns[1].Visible = false;
        }

        public Tuple<bool,int> GetDelete()
        {
            bool elimino = false;
            Tuple<bool, int> tupla;
            int contador = 0;
            foreach (DataGridViewRow item in dgvProductos.Rows)
            {
                if(Convert.ToBoolean(item.Cells[0].Value) == true)
                {
                    elimino = true;
                    contador++;
                }
            }
            tupla = Tuple.Create(elimino, contador);
            return tupla;
        }
        private void BtnEliminar_Click(object sender, EventArgs e)
        {
            Tuple<bool,int> valores;
            string rpta;
            valores = GetDelete();
            if (valores.Item1)
            {
                DialogResult dialogo = MessageBox.Show("Seguro desea eliminar " + valores.Item2 + " ?","Atencion",MessageBoxButtons.YesNo,MessageBoxIcon.Question);
                if (dialogo == DialogResult.Yes)
                {
                    foreach (DataGridViewRow item in dgvProductos.Rows)
                    {
                        if(Convert.ToBoolean(item.Cells[0].Value) == true)
                        {
                            int valor  =Convert.ToInt32(item.Cells[1].Value);
                            rpta = NProductos.GetDelete(Convert.ToInt32(item.Cells[1].Value));
                            if (!rpta.Equals("OK"))
                            {
                                MessageBox.Show("Error al eliminar un registro con Nombre: " + item.Cells[2].Value.ToString().ToUpper() + "\n" + rpta, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                bunifuCheckbox1.Checked = false;
                                BunifuCheckbox1_OnChange(bunifuCheckbox1, e);
                                return;
                            }
                        }
                        
                    }
                    LoadProd();
                    bunifuCheckbox1.Checked = false;
                    BunifuCheckbox1_OnChange(bunifuCheckbox1, e);
                    MessageBox.Show("Se eliminaron correctamente " + valores.Item2.ToString() + " Registros", "Atencion", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    
                }
            }
            else
            {
                MessageBox.Show("Debe seleccionar al menos un elemento a eliminar");
            }
        }

        private void HabiliarBotones()
        {
            if (isNuevo || isEditar)
            {
                btnNuevo.Enabled = true;
                btnEditar.Enabled = false;
                btnCancelar.Enabled = true;
                btnRegistrar.Enabled = true;
                HabiliarControles(true);
            }
            else
            {
                btnNuevo.Enabled = true;
                btnEditar.Enabled = true;
                btnCancelar.Enabled = false;
                btnRegistrar.Enabled = false;
                HabiliarControles(false);
            }
        }

        private void HabiliarControles(bool valor)
        {
            txtDesc.Enabled = txtPrecio.Enabled = txtStock.Enabled = rtxtObs.Enabled = valor;
        }

        private void LimpiarCampos()
        {
            txtDesc.Text = txtPrecio.Text = txtStock.Text = txtNro.Text = rtxtObs.Text = string.Empty;
        }
        private void Button1_Click(object sender, EventArgs e)
        {
            if (txtDesc.Text.Equals(string.Empty))
            {
                MessageBox.Show("Debe Seleccionar un registro a editar desde la pestaña LISTADO");
            }
            else
            {
                isEditar = true;
                isNuevo = false;
                HabiliarBotones();
            }
           
        }

        private void BtnNuevo_Click(object sender, EventArgs e)
        {
            isNuevo = true;
            isEditar = false;
            LimpiarCampos();
            HabiliarBotones();
        }

        private void Seleccionar_OnChange(object sender, EventArgs e)
        {
            if (seleccionar.Checked)
            {
                dgvProductos.Columns[0].Visible = true;
                dgvProductos.ReadOnly = false;
            }
            else
            {
                foreach (DataGridViewRow item in dgvProductos.Rows)
                {
                    item.Cells[0].Value = false;
                }
                dgvProductos.Columns[0].Visible = false;
                dgvProductos.ReadOnly = true;
            }
        }

        private void BtnRegistrar_Click(object sender, EventArgs e)
        {
            string rpta;
            if (isEditar)
            {
                if (!txtDesc.Text.Equals(string.Empty))
                {
                    rpta = NProductos.GetUpdate(Convert.ToInt32(txtNro.Text), txtDesc.Text, Convert.ToInt16(txtStock.Text), Convert.ToDouble(txtPrecio.Text), rtxtObs.Text);
                    if (!rpta.Equals("OK"))
                    {
                        MessageBox.Show("Error al editar el archivo: " + NProductos.GetToStringProd(Convert.ToInt32(txtNro.Text), txtDesc.Text, Convert.ToInt16(txtStock.Text),
                            Convert.ToDouble(txtPrecio.Text), rtxtObs.Text));
                    }
                    else
                    {
                        MessageBox.Show("Se Modifico Correctamente el producto con ID: " + txtNro.Text);
                        LoadProd();
                    }
                }
                else
                {
                    MessageBox.Show("Debe Seleccionar un registro a editar desde la pestaña LISTADO");
                }
            }
            else
            {
                if (isNuevo)
                {
                    if (!txtDesc.Text.Equals(string.Empty))
                    {
                        rpta = NProductos.GetInsert(txtDesc.Text, Convert.ToInt16(txtStock.Text), Convert.ToDouble(txtPrecio.Text), rtxtObs.Text);
                        if (!rpta.Equals("OK"))
                        {
                            MessageBox.Show("Error al Insertar el archivo: " + NProductos.GetToStringProd(Convert.ToInt32(txtNro.Text), txtDesc.Text, Convert.ToInt16(txtStock.Text),
                            Convert.ToDouble(txtPrecio.Text), rtxtObs.Text));
                        }
                        else
                        {
                            MessageBox.Show("Se inserto correctamente el producto", "Atencion", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            LoadProd();
                        }
                    }
                    else
                    {
                        MessageBox.Show("Faltan Llena Campos");
                    }
                    
                }
            }
            isNuevo =  isEditar = false;
            HabiliarBotones();
            
        }
    }
}

